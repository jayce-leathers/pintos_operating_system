            +--------------------+
            |        CS 334      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jayce Rudig-Leathers <jarudigleathers@vassar.edu>
Tim Brown <timbrown@vassar.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> me, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
  int waking_tick; //tick to wake at. set to system ticks + ticks to sleep for

Added to thread.c
  /*
  List of all sleeping threads. Keeps track of which threads the timer interrupt
  should attempt to wake up.
  */
  static struct list sleep_list

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

  timer_sleep() first checks whether the number of ticks to sleep for is
  greater than 0. If not, it returns immediately. It then calculates the tick at which
  the thread should wake up, by adding ticks to start. This is stored in the thread's
  member variable waking_tick.

  At this point, we disable interrupts because we are adding the thread to the sleep_list,
  a bit of shared state between the kernel thread and the timer interrupt handler. Once
  we disable them, the thread is inserted into the sleep_list. The thread then blocks via a call
  to thread_block. The thread will wait to be awoken by the timer interrupt handler, which
  at each tick will check each thread on the sleep list to see if their waiting_tick value
  is greater than the total ticks in the system. Once this happens, the thread is unblocked,
  placing it on the ready list, and removed from the sleep list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

  By storing the tick at which the thread should wake, there is a simple comparison
  check that must be made for each sleeping thread at each tick. If we hadn't stored this
  information, and instead just stored the number of ticks that the thread was required to
  sleep for, additional operations would be required to calculate whether the thread was
  ready to wake.

  An additional optimization we could make would be to insert threads into sleep_list in
  ascending order by number of ticks that they are required to sleep. This would have the
  benefit of not needing to traverse the entire list at every tick, because if the method
  encountered a thread that was not ready to wake, then necessarily the rest of the threads
  in the list would also not be ready to wake. This would add some complexity to the design,
  but might turn out to be necessary to reduce the amount of time spent in the timer interrupt
  handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

  While turning interrupts off is usually a poor method of synchronization in
  this case we do that before adding threads to to the sleeping threads list.
  This is to prevent preemption by any other thread. So the currently running
  thread stays running to completion.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

  Interrupts are turned off in the timer_sleep method because external interrupts
  cannot acquire locks this is the only way to insure timer_sleep can run without
  a race condition against the timer interrupt which also edits the sleep list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

  We had considered a solution which used locks to secure the list of threads
  sleeping but this have much thought we realized would be incorrect as the
  timer interrupt would always be able to preempt  timer_sleep() since it can't
  acquire locks. For this reason we decided to turn interrupts off. We also
  played around with adding multiple members to the thread struct to keep track
  of how long it sleep for but then realized that we could store only its waking
  tick rather than calculate it at each check.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define DONATION_REC_LEVEL 8 // the level to donate priority to

Added to struct thread
  /*The threads functioning priority the higher of its base_priority and any
  priority donated to it */
  int effective_priority;

  /*A reference to any lock a thread is waiting on. NULL if the thread is not
  waiting on a lock. Used to handle nested priority donation */
  struct lock * waiting_lock;

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

//TODO add image (Jayce has a picture on his phone of a whiteboard sketch we did)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

  We always pull the thread with the highest priority from the list of waiters
  in the semaphore. Since locks and condition variables are implemented with
  semaphores this insures that they also always wake up the thread with highest
  priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

  lock_acquire is changed to first check if the lock is available. If it is
  it acquires it. Otherwise it checks the priority of the locks current_holder.
  If the current thread's priority is higher it calls donate_priority() on
  the locks current_holder. donate_priority() recursively donates priority to
  any thread which the current_holder is waiting on by checking the waiting_lock
  member of the current_holder to specified recursive depth.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
  need a list of donor threads in thread.h
  The thread that releases the lock checks if its base_priority is lower than its effective_priority if it is it lowers it priority  finds the highest priority thread that
  is waiting on the lock. It unblocks that thread, and returns its donated
  priority since it is no longer necessary.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

  In our implementation thread_set_priority() only modifies it's own priority and is 
  not called externally. Thus there is no race since there is no competition for 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

  Still fleshing the design out fully.


              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  Unimplemented so far

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   63  61  59      A
 4     4   0   0   62  61  59      A
 8     8   0   0   61  61  59      B
12     8   4   0   61  60  59      A
16     12  4   0   60  60  59      B
20     12  8   0   60  59  59      A
24     16  8   0   59  59  59      C
28     16  8   4   59  59  58      B
32     16  12  4   59  58  58      A
36     20  12  4   58  58  58      C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

  Yes at ticks 8, 16, 24, 28, and 36. We choose the thread with the lowest recent
  cpu value to run next.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

  Code has not been implemented yet, we will try to minimize the code written
  in the interrupt handler.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

  We will have more to say here once we've done more with the floating point
  math.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

  Unimplemented yet, need to think through this more.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?
